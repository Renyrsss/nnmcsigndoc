import {
  StageColumn
} from "./chunk-L5AW2W2Q.js";
import "./chunk-BHGFGSYR.js";
import {
  useGetRecentlyAssignedDocumentsQuery
} from "./chunk-YIP3K5C7.js";
import "./chunk-WJNHAP4B.js";
import "./chunk-2X5VPZ2P.js";
import "./chunk-6O5OLJ3H.js";
import "./chunk-VNWJ4KKL.js";
import {
  DocumentStatus,
  RelativeTime
} from "./chunk-NN7I6HBS.js";
import "./chunk-QLX7GQS4.js";
import "./chunk-NOTUB3JD.js";
import "./chunk-M3E57YDS.js";
import "./chunk-2PKVM2JR.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-3GKSM22F.js";
import "./chunk-PSSNSELH.js";
import "./chunk-RKO4BOCR.js";
import "./chunk-WRZDWTGU.js";
import "./chunk-75XTHHTN.js";
import "./chunk-4NAF5W6E.js";
import "./chunk-FT3L2DHK.js";
import {
  Widget
} from "./chunk-IN6ZLDGY.js";
import "./chunk-WUCZOGOZ.js";
import "./chunk-PMOAE3MM.js";
import "./chunk-VCI4ZHLQ.js";
import "./chunk-QIJGNK42.js";
import "./chunk-QCSUIBLX.js";
import "./chunk-ESSRQHZI.js";
import "./chunk-DEPSTSDQ.js";
import "./chunk-A5Q57TAH.js";
import "./chunk-463JLXR4.js";
import "./chunk-ZNMIZZ5L.js";
import "./chunk-I4ZJ4H3D.js";
import "./chunk-EODUY5KM.js";
import "./chunk-S7NGXQB4.js";
import "./chunk-2GAA65BV.js";
import "./chunk-KCH2J2JH.js";
import "./chunk-STPCI2VC.js";
import "./chunk-T6L3H7W5.js";
import "./chunk-WLESZBNU.js";
import "./chunk-OIRXFBXM.js";
import "./chunk-GSS3VPOL.js";
import "./chunk-QKOM4BQW.js";
import "./chunk-3TP4NRZF.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-3DXODPN2.js";
import "./chunk-GOCXJSG5.js";
import "./chunk-T2ARN7TZ.js";
import "./chunk-F2U3ELYS.js";
import "./chunk-3MFJCHUS.js";
import "./chunk-5KSKASNQ.js";
import "./chunk-EYKV5VT6.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-FVCM5UXG.js";
import "./chunk-U2S4VNVE.js";
import "./chunk-4FX2ZSS4.js";
import "./chunk-AFKKV4AI.js";
import {
  useTracking
} from "./chunk-QGTVHIRS.js";
import "./chunk-AAYRDTCB.js";
import "./chunk-3GJUYW3U.js";
import "./chunk-PQINNV4N.js";
import "./chunk-FPU5PDM4.js";
import "./chunk-DCAZPVRX.js";
import "./chunk-BRC7J3UG.js";
import "./chunk-FFHFTD5C.js";
import "./chunk-UEV6VIK2.js";
import "./chunk-Y43T2BU2.js";
import "./chunk-4KCSPRST.js";
import "./chunk-V3H6CYGR.js";
import "./chunk-ZC6UOKQ5.js";
import "./chunk-HM5YIFDI.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-NSJ43L5S.js";
import "./chunk-7K6WC7UG.js";
import {
  Link,
  useNavigate
} from "./chunk-RKN75MQZ.js";
import "./chunk-AWHRF5BE.js";
import {
  ForwardRef$N
} from "./chunk-EXVE46AP.js";
import {
  require_jsx_runtime
} from "./chunk-LMPM4PM5.js";
import {
  dt
} from "./chunk-3LBZKDTB.js";
import "./chunk-D3I3COXH.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@strapi/review-workflows/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var RecentDocumentsTable = ({ documents, type }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (document) => {
    const isSingleType = document.kind === "singleType";
    const kindPath = isSingleType ? "single-types" : "collection-types";
    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : "";
    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? "" : "/" + document.documentId}${queryParams}`;
  };
  const handleRowClick = (document) => () => {
    trackUsage("willEditEntryFromHome", {
      entryType: type
    });
    const link = getEditViewLink(document);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 6,
    rowCount: (documents == null ? void 0 : documents.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: documents == null ? void 0 : documents.map((document) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(document),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: document.title,
              variant: "omega",
              textColor: "neutral800",
              children: document.title
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              variant: "omega",
              textColor: "neutral600",
              children: document.kind === "singleType" ? formatMessage({
                id: "content-manager.widget.last-edited.single-type",
                defaultMessage: "Single-Type"
              }) : formatMessage({
                id: document.contentTypeDisplayName,
                defaultMessage: document.contentTypeDisplayName
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: document.status ? (0, import_jsx_runtime.jsx)(DocumentStatus, {
                status: document.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              textColor: "neutral600",
              children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(document.updatedAt)
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(StageColumn, {
              strapi_stage: document.strapi_stage
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(document),
                onClick: () => trackUsage("willEditEntryFromHome", {
                  entryType: type
                }),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$N, {})
              })
            })
          })
        ]
      }, document.documentId))
    })
  });
};
var AssignedWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "review-workflows.widget.assigned.no-data",
        defaultMessage: "No entries"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(RecentDocumentsTable, {
    documents: data,
    type: "assigned"
  });
};
export {
  AssignedWidget
};
//# sourceMappingURL=Widgets-OP25NDYH.js.map
